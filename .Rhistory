#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea,  method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
ggRGB(pan_pca, stretch="lin") + ggtitle("Pansharpened (pan_pca)")
plot(area)
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
plot(ndvibroshift)
ndviihsshift1 <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
plot(ndviihsshift1)
#Working with a backup file in the working file, as pansharping takes time
backup<- mask(ndvibroshift, field)
workingFile <- backup
backup1 <- mask(ndvibroshift, area)
workingFile1 <- backup1
plot(workingFile1)
#Create a file for the points
points = xyFromCell(ndvibroshift,which.max(ndvibroshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile1))){
if(maxValue(workingFile1) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile1,which.max(workingFile1), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile1, buf, cellnumbers=T))
workingFile1[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "al_trees_field_25", driver="ESRI Shapefile")
plot(workingFile1)
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","palm_tree_area_field25")
plot(area)
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
plot(ndvibroshift)
ndviihsshift1 <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
plot(ndviihsshift1)
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
plor
plot(pan_broshift)
plot(ndvibroshift)
#Create a file for the points
points = xyFromCell(ndvibroshift,which.max(ndvibroshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile1))){
if(maxValue(workingFile1) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile1,which.max(workingFile1), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile1, buf, cellnumbers=T))
workingFile1[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "al_trees_field_25", driver="ESRI Shapefile")
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","palm_tree_area_field25")
panarea <- crop(pan, area)
bandsarea <- crop(bands, area)
area <- spTransform(area, CRS(proj4string(bands)))
panarea <- crop(pan, area)
bandsarea <- crop(bands, area)
plot(panarea)
plot(area)
rm(list=ls())
library(RStoolbox)
library(raster)
library(ggplot2)
library(rgdal)
library(beepr)
library(sp)
#Input parameters
ndvithres <- 0.4 #suggested value: 0.3-0.45
bufferdist <- 3.5 #radius of the buffer, suggested value: 2-4 meter
#Input files
pan <- raster("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_PAN/18NOV04071014-P2AS_R3C1-059639660010_01_P001.TIF")
bands<- brick("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_MUL/18NOV04071014-M2AS_R3C1-059639660010_01_P001.TIF")
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","palm_tree_area_field25")
area <- spTransform(area, CRS(proj4string(bands)))
panarea <- crop(pan, area)
bandsarea <- crop(bands, area)
#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea,  method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
#ggRGB(pan_pca, stretch="lin") + ggtitle("Pansharpened (pan_pca)")
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
plot(ndvibroshift)
ndviihsshift1 <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
plot(ndviihsshift1)
#Working with a backup file in the working file, as pansharping takes time
# backup<- mask(ndvibroshift, field)
# workingFile <- backup
backup1 <- mask(ndvibroshift, area)
workingFile1 <- backup1
plot(workingFile1)
#Create a file for the points
points = xyFromCell(ndvibroshift,which.max(ndvibroshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile1))){
if(maxValue(workingFile1) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile1,which.max(workingFile1), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile1, buf, cellnumbers=T))
workingFile1[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "alg_trees_field_25", driver="ESRI Shapefile")
writeRaster(pan_bro, "F:/palmdetection/pan_bro1.tif")
writeRaster(pan_ihs, "F:/palmdetection/pan_ihs1.tif")
writeRaster(pan_pca, "F:/palmdetection/pan_pca1.tif")
pan_bro_area <- crop(pan_bro, area)
pan_ihs_area <- crop(pan_ihs, area)
pan_pca_area <- crop(pan_pca, area)
MS_area <- crop(bands, area)
writeRaster(pan_bro_area, "F:/palmdetection/pan_bro25.tif")
writeRaster(pan_ihs_area, "F:/palmdetection/pan_ihs25.tif")
writeRaster(pan_pca_area, "F:/palmdetection/pan_pca25.tif")
writeRaster(MS_area, "F:/palmdetection/MS_area25.tif")
MS_area_band2 <-  raster(MS_area,  band = 2)
MS_area_band2  <-  raster("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_MUL/18NOV04071014-M2AS_R3C1-059639660010_01_P001.TIF", band = 2)
pan_bro_area_band2  <-  raster("F:/palmdetection/pan_bro25.tif", band = 2)
ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation")
ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25
MS_area_band2  <-  raster("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_MUL/18NOV04071014-M2AS_R3C1-059639660010_01_P001.TIF", band = 2)
pan_bro_area_band2  <-  raster("F:/palmdetection/pan_bro25.tif", band = 2)
#test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25 <- cor(values(MS_area_band2), values(pan_bro_area_band2  ), use = "na.or.complete")
?cor
#test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25 <- cor(values(MS_area_band2), values(pan_bro_area_band2  ), use = "complete.obs")
#test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25 <- cor(values(MS_area_band2), values(pan_bro_area_band2  ), use = "complete.obs",method = c("pearson"))
??ccf
test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
pan_ihs_area_band2  <-  raster("F:/palmdetection/pan_ihs25.tif", band = 2)
test_bro_25 <- ccf(values(MS_area_band2),values(pan_ihs_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25 <- ccf(values(MS_area_band2),values(pan_bro_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_ihs_25 <- ccf(values(MS_area_band2),values(pan_ihs_area_band2), ylab = "cross-correlation",na.action = na.pass)
test_bro_25
test_ihs_25
mean(test_bro_25)
average(test_bro_25)
??aver
pan_pca_area_band2  <-  raster("F:/palmdetection/pan_pca25.tif", band = 2)
test_ihs_25 <- ccf(values(MS_area_band2),values(pan_pca_area_band2), ylab = "cross-correlation",na.action = na.pass)
mean(values(test_bro_25))
class(test_bro_25)
rm(list=ls())
library(RStoolbox)
library(ggplot2)
library(raster)
library(rgdal)
library(beepr)
library(sp)
#Input parameters
ndvithres <- 0.4 #suggested value: 0.3-0.45
bufferdist <- 3.5 #radius of the buffer, suggested value: 2-4 meter
#Input files
pan <- raster("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_PAN/18NOV04071014-P2AS_R3C1-059639660010_01_P001.TIF")
bands<- brick("F:/UAE - Abu Dhabi 20190415/data/059639660010_01/059639660010_01_P001_MUL/18NOV04071014-M2AS_R3C1-059639660010_01_P001.TIF")
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","palm_tree_area_field25")
area <- spTransform(area, CRS(proj4string(bands)))
panarea <- crop(pan, area)
bandsarea <- crop(bands, area)
#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea,  method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
plot(ndvibroshift)
ndviihsshift1 <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
plot(ndviihsshift1)
backup1 <- mask(ndvibroshift, area)
workingFile1 <- backup1
plot(workingFile1)
#Create a file for the points
points = xyFromCell(ndvibroshift,which.max(ndvibroshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile1))){
if(maxValue(workingFile1) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile1,which.max(workingFile1), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile1, buf, cellnumbers=T))
workingFile1[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "alg_trees_field_25", driver="ESRI Shapefile")
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
plot(ndviihsshift)
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif")
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif")
ndviihsshift<- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif")
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif")
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif")
backup_ihs <- mask(ndviihsshift, area)
workingFile_ihs <- backup_ihs
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Create a file for the points
points = xyFromCell(ndvibroshift,which.max(ndvibroshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
points
length(workingFile_ihs)
#Input parameters
ndvithres <- 0.22 #suggested value: 0.3-0.45
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
points
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-9]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea,  method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif")
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif")
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif")
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif", overwrite = TRUE)
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif", overwrite = TRUE)
#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
plot(pan_broshift)
plot(pan_ihsshift)
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
writeRaster(pan_broshift, "F:/palmdetection/pan_bro_shift.tif", overwrite = TRUE)
writeRaster(pan_ihsshift, "F:/palmdetection/pan_ihs_shift.tif", overwrite = TRUE)
writeRaster(pan_pcashift, "F:/palmdetection/pan_pca_shift.tif",overwrite = TRUE)
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif", overwrite = TRUE)
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif", overwrite = TRUE)
#Create a file for the points
points = xyFromCell(ndviihsshift,which.max(ndviihsshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
points
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
length(workingFile_ihs)
maxValue(workingFile_ihs)
backup_ihs <- mask(ndviihsshift, area)
workingFile_ihs <- backup_ihs
#Create a file for the points
points = xyFromCell(ndviihsshift,which.max(ndviihsshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile")
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile", overwrite_layer = TRUE)
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile", overwrite = TRUE)
plot(backup_ihs)
plot(area)
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","alrhabah.shp")
#field <- readOGR("E:/Viridian/projects/Palms","alrhabab40N")
area <- readOGR("F:/palmdetection","alrhabah")
area <- spTransform(area, CRS(proj4string(bands)))
panarea <- crop(pan, area)
bandsarea <- crop(bands, area)
#Pansharpening to get best imagery for visual purposes
pan_bro <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "brovey")
pan_pca <- panSharpen(bandsarea, panarea, r = 3, g = 2, b = 1, method = "pca")
pan_ihs <- panSharpen(bandsarea, panarea,r = 3, g = 2, b = 1,  method = "ihs")
#Pansharpening with a shift, to get band 4 included for calculation of NDVI
pan_broshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2, method = "brovey")
pan_ihsshift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "ihs")
pan_pcashift <- panSharpen(bandsarea, panarea, r = 4, g = 3, b = 2,  method = "pca")
writeRaster(pan_broshift, "F:/palmdetection/pan_bro_shift.tif", overwrite = TRUE)
writeRaster(pan_ihsshift, "F:/palmdetection/pan_ihs_shift.tif", overwrite = TRUE)
writeRaster(pan_pcashift, "F:/palmdetection/pan_pca_shift.tif",overwrite = TRUE)
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif", overwrite = TRUE)
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif", overwrite = TRUE)
backup1 <- mask(ndvibroshift, area)
workingFile1 <- backup1
backup_ihs <- mask(ndviihsshift, area)
workingFile_ihs <- backup_ihs
writeRaster(pan_broshift, "F:/palmdetection/pan_bro_shift.tif", overwrite = TRUE)
writeRaster(pan_ihsshift, "F:/palmdetection/pan_ihs_shift.tif", overwrite = TRUE)
writeRaster(pan_pcashift, "F:/palmdetection/pan_pca_shift.tif",overwrite = TRUE)
#Calculation NDVI
ndvibroshift<- (pan_broshift[[3]]-pan_broshift[[2]])/(pan_broshift[[3]]+pan_broshift[[2]])
ndviihsshift <- (pan_ihsshift[[3]]-pan_ihsshift[[2]])/(pan_ihsshift[[3]]+pan_ihsshift[[2]])
ndvipcashift<- (pan_pcashift[[3]]-pan_pcashift[[2]])/(pan_pcashift[[3]]+pan_pcashift[[2]])
writeRaster(ndvibroshift, "F:/palmdetection/ndvibroshift.tif", overwrite = TRUE)
writeRaster(ndviihsshift, "F:/palmdetection/ndviihsshift.tif", overwrite = TRUE)
writeRaster(ndvipcashift, "F:/palmdetection/ndvipcashift.tif", overwrite = TRUE)
backup1 <- mask(ndvibroshift, area)
workingFile1 <- backup1
backup_ihs <- mask(ndviihsshift, area)
workingFile_ihs <- backup_ihs
#Create a file for the points
points = xyFromCell(ndviihsshift,which.max(ndviihsshift), spatial=T)
plot(points)
#Checks for each cell, in turn by value, if the NDVI value is greater than the threshold value
#If it is, a point is placed at the location of the highest value, and the values within the buffer are set to 0
#This way, only one point within the buffer (so one point per tree) gets placed.
for(i in c(1:length(workingFile_ihs))){
if(maxValue(workingFile_ihs) > ndvithres){#Pansharpening to get best imagery for visual purposes
pos <- xyFromCell(workingFile_ihs,which.max(workingFile_ihs), spatial=T)[1]
buf <- buffer(pos,bufferdist)
a <- data.frame(extract(workingFile_ihs, buf, cellnumbers=T))
workingFile_ihs[a[,1]] <- 0
points <- rbind(points,pos)
}else(break)
}
#Removes the first point placed, this point was added to create the file, and creates the final file to save
points <- points[-1]
maxList <- data.frame(c(1:nrow(points@coords)))
p2 <- SpatialPointsDataFrame(points,maxList)
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile", overwrite = TRUE)
writeOGR(p2, "F:/palmdetection", "alg_ihs_trees_field_25", driver="ESRI Shapefile", overwrite = TRUE)
rm(list=ls())
library(RStoolbox)
library(raster)
library(ggplot2)
library(rgdal)
library(beepr)
library(sp)
#Input parameters
ndvithres <- 0.22 #suggested value: 0.3-0.45
bufferdist <- 3.5 #radius of the buffer, suggested value: 2-4 meter
setwd("~/")
library(markdown)
render_site
render_site()
install.packages("render_site")
rmarkdown::render_site
renderMarkdown()
ap <- available.packages()
View(ap)
"render" %in% rownames(ap)
View(ap)
"render_site" %in% rownames(ap)
View(ap)
"render_site" %in% rownames(ap)
setwd("D:/GitHubReoisitory/MengZhang127.github.io")
install.packages("rmarkdown")
library(rmarkdown)
render_site()
render_site()
